# see http://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html
SHELL = /bin/sh

#### System Configuration ####

VERSION	 = ` date "+%Y.%m%d" `


BOOST = ~/programming/boost/boost_1_57_0
CC = g++
CDEBUG = -g3 -Wall
CFLAGS = $(CDEBUG) -O -std=c++0x
ALL_CFLAGS = -I$(BOOST) $(CFLAGS)

#defining paths
prefix = ~/machine_learning/c++_implementation
bindir = $(prefix)/bin
libdir = $(prefix)/lib
srcdir = $(prefix)/source
testdir = $(prefix)/test

#### End of system configuration section ####


#the programs to be created
_PROGRAM1 = test_bayes test_densitytree test_densityforest \
            test_copula test_copulaforest
_PROGRAM2 = test_depth test_nearestneighbors test_readin test_sortindex test_getcopula
_PROGRAM3 = $(_PROGRAM1) $(_PROGRAM2)
PROGRAM = $(patsubst %,$(bindir)/%,$(_PROGRAM3))

#gather source files
_SRC1 = BayesClassifier.cpp DensityTreeClassifier.cpp CopulaClassifier.cpp \
        DensityForestClassifier.cpp CopulaForestClassifier.cpp \
        common.cpp node_t.cpp
_SRC2 = test_bayes.cpp test_densitytree.cpp test_copula.cpp \
        test_densityforest.cpp test_copulaforest.cpp test_template.cpp \
        test_depth.cpp test_nearestneighbors.cpp test_readin.cpp \
        test_sortindex.cpp test_getcopula.cpp
SRC = $(patsubst %,$(srcdir)/%,$(_SRC1)) $(patsubst %,$(testdir)/%,$(_SRC2))

#gather header files
_DEP1 = BayesClassifier.h DensityTreeClassifier.h CopulaClassifier.h \
        DensityForestClassifier.h CopulaForestClassifier.h \
        Classifier.h utility/common.h utility/node_t.h utility/splits.h
_DEP2 = test_template.h
DEP = $(patsubst %,$(srcdir)/%,$(_DEP1)) $(patsubst %,$(testdir)/%,$(_DEP2))

#gather object files
_OBJ1 = BayesClassifier.o DensityTreeClassifier.o CopulaClassifier.o \
        DensityForestClassifier.o CopulaForestClassifier.o \
        common.o node_t.o
_OBJ2 = test_template.o
_OBJ3 = $(_OBJ1) $(_OBJ2)
OBJ = $(patsubst %,$(libdir)/%,$(_OBJ3))


#use overloading of MACROs from the command line to determine the PROGRAM

# target: all - Default target. Install everything.
all: _installdirs install

# target: install - Install the package.
install: $(SRC) $(DEP) $(OBJ) $(PROGRAM)

# Make sure all installation directories (e.g. $(bindir))
# actually exist by making them if necessary.
_installdirs: mkinstalldirs
	@mkinstalldirs $(bindir) $(libdir)

	
# $@ LHS of : i.e. target
# $< $^ RHS of : i.e. 1 prerequesite or all

#compilation rule for objects from source
$(libdir)/%.o: $(srcdir)/%.cpp
	$(CC) $(ALL_CFLAGS) -c -o $@ $<

#compile objects from test
$(libdir)/%.o: $(testdir)/%.cpp
	$(CC) $(ALL_CFLAGS) -c -o $@ $<

#create executable binaries
$(bindir)/%: $(testdir)/%.cpp
	$(CC) $(ALL_CFLAGS) -o $@ $< $(OBJ)

# target: compile program
#$(PROGRAM): $(testdir)/$(PROGRAM).cpp $(OBJ)
#	$(CC) $(ALL_CFLAGS) -o $(bindir)/$@ $< $(OBJ)

# target: help - Display callable targets.
help:
	@egrep "^# target:" [Mm]akefile
	@echo $(VERSION)

# target: clean - Delete created files.
clean: $(SRC) $(DEP)
	rm -f $(libdir)/*.o $(bindir)/*
